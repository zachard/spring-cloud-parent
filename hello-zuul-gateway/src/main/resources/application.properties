# 指定当前应用的名称及服务名称
spring.application.name=zuul-gateway
# 指定当前应用的端口号
server.port=9007

# 开启可以使用IP地址定义Eureka注册中心地址
eureka.instance.prefer-ip-address=true
# 需要将服务注册到的注册中心地址
# 加入spring-cloud-starter-eureka架包之后, 必须提供这个Eureka注册中心的地址配置, 否则项目启动报错(虽然能够起起来)
# 作为API网关服务, 也必须注册到对应注册中心, 除了将自己注册成服务外, 也让Zuul可以获取注册中心其他服务的实例清单
eureka.client.serviceUrl.defaultZone=http://10.211.55.3:8001/eureka/

# 传统的路由配置方式(一组path/url维护了一组路由关系, zuul对应的/api-a-url/**的请求会转发到http://10.211.55.3:9001)
# 缺点: 需要运维人员花费大量的时间维护各个路由的path与url关系
# zuul.routes.api-a-url.path=/api-a-url/**
# zuul.routes.api-a-url.url=http://10.211.55.3:9001/

# 传统路由配置方式多实例配置
# zuul.routes.multi-instance-service.path=/multi/instance/**
# zuul.routes.multi-instance-service.serviceId=multi-instance-service
# 避免ribbon到注册中心查找服务对应的实例清单列表
# ribbon.eureka.enabled=false
# 手动指定服务对应的实例列表
# multi-instance-service.ribbon.listOfServers=http://10.211.55.3:9001/,http://10.211.55.3:9002/

# 面向服务的路由
# 将维护path与url之间的映射关系转换为维护path与serviceId之间的映射关系
# 不同之处: 同一个serviceId下面可能会对应多个url(即一个服务会对应多个服务实例)
# 请求映射规则: path中的/**对应的请求路径映射到serviceId中对应的请求路径, 例如:
# 请求 http://localhost:9007/feign/comsumer/requestParam 会被映射到 http://10.211.55.3:9005/requestParam
# zuul.routes.zachard-service.path=/zachard/service/**
# zuul.routes.zachard-service.serviceId=zachard-service-1

# zuul.routes.feign-consumer.path=/feign/comsumer/**
# zuul.routes.feign-consumer.serviceId=feign-consumer

# 面向服务路由的简洁配置方式: zuul.routes.<serviceId>=<path>
# zuul.routes.feign-consumer=/feign/comsumer/**
# 当服务配置的请求路径存在与zuul.prefix相同值时, 会出现路径映射问题, 所以zuul.prefix慎用
# zuul.routes.feign-consumer=/api/feign/comsumer/**

# 配置路由进行本地跳转(通过forward指定网关服务中服务路径, 此服务在网关中需要存在)
# 似乎没有生效
# zuul.routes.local-forward.path=/local-forward/**
# zuul.routes.local-forward.url=forward:/local/

# 默认情况下Zuul会为每个serviceId创建与其名称相同的path
# 可以通过zuul.ignored-services指定不自动创建路由规则的服务, 例如: 下面表示所有服务都不自动创建路由规则
# zuul.ignored-services=*

# 忽略路径匹配表达式, 以下表示忽略请求路径中包含: /hello 的请求
# zuul.ignored-patterns=/**/hello/**

# 为网关路由规则加上前缀, 注意请求路径中不要存在与前缀相同的路径(感觉这个前缀的设置有个严重的bug)
# zuul.prefix=/api
# 全局关闭移除代理前缀操作
# zuul.stripPrefix=false
# 关闭指定路由规则移除代理前缀操作
# zuul.routes.feign-consumer.strip-prefix=true

# 设置Spring Cloud Zuul不过滤HTTP请求中的敏感信息(包含: Cookie, Set-Cookie, Authorization)
# 配置方式: zuul.routes.<router>.customSensitiveHeaders=true 
# 或是 zuul.routes.<router>.sensitiveHeaders=
# zuul.routes.feign-consumer.customSensitiveHeaders=true
# zuul.routes.feign-consumer.sensitiveHeaders=

# 防止HTTP请求信息未过滤时, 暴露网关后面具体服务实例请求地址等信息问题(netflix-core 1.2.x版本开始)
# zuul.addHostheader=true

# Hystrix及Ribbon整合设置
# 设置API网关中路由转发请求的HystrixCommand执行超时时间(单位: 毫秒, 返回特定的响应信息)
# hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=5000
# 设置路由转发请求时, 创建连接请求的连接时间 (返回特定的响应信息)
# 当创建连接请求时间小于转发请求执行时间, 并出现创建连接请求超时时, 会自动进入重试路由请求
# 当创建连接请求时间大于转发请求执行时间, 并出现创建连接请求超时时, 会按转发超时时间处理
# ribbon.ConnectTimeout=2000
# 设置路由转发请求时, 请求连接建立后的处理超时时间, 与ConnectTimeout类似
# ribbon.ReadTimeout=2000
# 关闭请求超时自动重试机制
# 全局关闭
# zuul.retryable=false
# 指定实例关闭: zuul.routes.<route>.retryable=false
# zuul.routes.feign-consumer.retryable=false

# 禁用Zuul过滤器: zuul.<SimpleClassName>.<filterType>.disable=true
# 指定类型是因为SimpleClassName可能会同名
# zuul.AccessFilter.pre.disable=true

management.security.enabled=false

# 通过Spring Config配置中心来实现API路由的动态配置
# 配置配置中心服务的地址
spring.cloud.config.uri=http://10.211.55.3:7001/
# 注: spring.application.name在上面已经配置
#     spring.cloud.config.profile未配置, 默认为default
#     spring.cloud.config.label未配置, 默认为master

# 配置访问Spring Config配置中心服务端的用户名及密码
spring.cloud.config.username=zachard
spring.cloud.config.password=zachard

# 动态加载过滤器参数配置
# 用于指定动态加载过滤器的存储路径(注: 这里指向的路径并不是配置中心的路径, 而是当前项目根路径下的路径)
zuul.filter.root=filter
# 用于配置动态加载过滤器的时间间隔
zuul.filter.interval=5
